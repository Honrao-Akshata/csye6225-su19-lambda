  {
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template",
    "Parameters" : {
      "SNSName":{
         "Default":"reset_password",
         "Type": "String"

     },    
     "CFNUser" : {
        "Type": "String",
        "Default": "circleci"
     },
       
      "S3CodeDeployBucket":{
         "Description": "S3 bucket name where code deploy artifacts are stored",
         "Type": "String"
       },
       
      "domain":{
         "Description": "domain for  for SES",
         "Type": "String"
       },

       "fromemail":{
        "Description": "from address  for SES",
         "Type": "String"

       }
     },



    "Resources" :{

      "CodeDeployApplication": {
        "Type": "AWS::CodeDeploy::Application",
        "Properties": {
          "ApplicationName" : "csye6225-Lambda-function",
          "ComputePlatform": "Lambda"
        }
      },

      "myLambda": {
        "Type": "AWS::Lambda::Function",
        "DependsOn" : ["LambdaExecutionRole","CodeDeployApplication"],
        "Properties": {
          "FunctionName":"myLambda",
          "Handler" : "EmailEvent::handleRequest",
          "Role": {"Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
          "Code":
            {
              "S3Bucket" : {"Ref" : "S3CodeDeployBucket"},
              "S3Key" : "aws-lambda-0.0.1.zip"
            },
          "Description" : "lambda function for reset Passowrd",
          "Environment" :
            {
              "Variables" : {
                              "domain" : {"Ref":"domain"} ,
                              "fromemail" : {"Ref" : "fromemail"},
                              "ttl" : "15"

                            }
            },
          "Runtime": "java8",
          "Timeout": 300,
          "MemorySize":512
          }
        },

      "mySNSTopic":{
        "Type" : "AWS::SNS::Topic",
        "DependsOn" : "myLambda",
        "Properties" : {
        "TopicName" : {"Ref":"SNSName"},
        "Subscription":[{"Endpoint":{"Fn::GetAtt":[
                         "myLambda","Arn"
                ]},"Protocol":"lambda"
                }],
                "DisplayName":"ResetPassword"
            }

        },


        "snsIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName" : "snsIAMRole",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ssm.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "snsAccess",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                        {
                            "Action": [
                              "SNS:Publish",
                              "SNS:DeleteTopic",
                              "SNS:ListSubscriptionsByTopic",
                              "SNS:GetTopicAttributes",
                              "SNS:Receive",
                              "SNS:AddPermission",
                              "SNS:Subscribe"
                           ],
                            "Effect": "Allow",
                           "Resource": [
                              {"Ref" : "mySNSTopic"}
                            ]
                        }]
                    }
                }]
            }
        },

        "LambdaInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "Principal": "sns.amazonaws.com",
            "SourceArn": { "Ref": "mySNSTopic" },
            "FunctionName": {
              "Fn::GetAtt": [ "myLambda", "Arn" ]
              }
            }
        },

    "CirlceCICodeDeployLambda" : {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "ManagedPolicyName": "CirlceCI-Code-Deploy-Lambda",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":application:csye6225-Lambda-function" ] ]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.OneAtATime"] ]},
                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.HalfAtATime"] ]},
                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.LambdaAllAtOnce"] ]}
              ]
            }
          ]
        },
        "Users" : [ { "Ref" : "CFNUser" } ]
      }
    },
         



              "CodeDeployLambdaS3" : {
                "Type" : "AWS::IAM::ManagedPolicy",
                "Properties" : {
                  "ManagedPolicyName": "CodeDeploy-Lambda-S3",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Action": [
                          "s3:Get*",
                          "s3:List*"
                        ],
                        "Effect": "Allow",
                        "Resource":[
                          {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }] ]},
                          {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }, "/*"] ]}
                        ]
                      }
                    ]
                  },
                  "Users" : [ { "Ref" : "CFNUser" } ]
                }
              },



              
        "CirlceCILambda" : {
                "Type" : "AWS::IAM::ManagedPolicy",
                "Properties" : {
                  "ManagedPolicyName": "CirlceCILambda",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Action": [
                          "lambda:List*",
                          "lambda:Create*",
                          "lambda:Update*",
                          "lambda:List*"
                        ],
                        "Effect": "Allow",
                        "Resource":[
                        {"Fn::GetAtt" : ["myLambda", "Arn"] }
                        ]
                      }
                    ]
                  },
                  "Users" : [ { "Ref" : "CFNUser" } ]
                }
        },

      "LambdaFunctionPolicy":{
         "DependsOn": [
            "LambdaExecutionRole"
         ],
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyDocument":{
               "Version": "2012-10-17",
               "Statement": [{
                     "Effect": "Allow",
                     "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:GetItem",
                        "dynamodb:Query",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem"
                     ],
                     "Resource": [
                        {"Fn::Join" : [ "", [ "arn:aws:dynamodb:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":table/csye6225" ] ]}
                      ]
                  },
                  {
                     "Effect": "Allow",
                     "Action":[
                        "SES:SendEmail",
                        "SES:SendRawEmail"
                      ],
                     "Resource": [
                        {"Fn::Join" : [ "", [ "arn:aws:ses:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":identity/",{"Ref" : "domain"} ] ]}
                      ]
                  }
               ]
            },
            "PolicyName":"LambdaFunctionPolicy",
            "Roles":[
               {
                  "Ref":"LambdaExecutionRole"
               }
            ]
         }
      },


      "LambdaExecutionRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
               "AssumeRolePolicyDocument":{
                  "Version":"2012-10-17",
                  "Statement":[
                     {
                        "Sid":"",
                        "Effect":"Allow",
                        "Principal":{
                           "Service":[
                              "lambda.amazonaws.com"
                           ]
                        },
                        "Action":"sts:AssumeRole"
                     }
                  ]
               },
               "ManagedPolicyArns":[
                  "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
               ],
               "Path":"/",
               "RoleName":"LambdaExecutionRole"
            }
         }



    },

    "Outputs" : {
     "mySNSTopicArn" : {
       "Description" : "SNS Arn",
       "Value" : 
         { "Ref": "mySNSTopic" },
       "Export" : {
         "Name" : "SNSARN"
       }
     }
  }

}
